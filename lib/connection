#!/usr/bin/env bash
## Copyright (c) 2017 helmuthdu <helmuthdu@gmail.com>
## Copyright (c) 2017 Stephen Ribich <stephen.ribich@gmail.com>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Ping the default route to check if the machine is connected to the internet
##
test_connection()
{
    local ip

    ip=$(ip route             \
             | grep 'default' \
             | awk 'NR==1 { print $3 }')

    if ! ping -q -w 1 -c 1 "${ip}" 1>/dev/null 2>&1; then
        return 1
    fi

    return 0
}

## Attempt to connect to the internet if not already done
##
check_connection()
{
    local connection_types=("Wired Automatic" "Wired Manual" "Wireless")

    local wired_dev
    local wireless_dev

    wired_dev=$(ip link                           \
                    | grep '^[0-9].*en.*:'        \
                    | awk 'NR==1 { print $2 }'    \
                    | sed 's/://')
    wireless_dev=$(ip link                        \
                       | grep '^[0-9].*wl.*:'     \
                       | awk 'NR==1 { print $2 }' \
                       | sed 's/://')

    if test_connection; then
        return 0
    fi

    print_title "Network Setup"

    selection "How would you like to configure the network?" \
              "${connection_types[@]}"

    case "${SELECTION_VALUE}" in
        "Wired Automatic")
            systemctl start "dhcpcd@${wired_dev}.service"
            ;;
        "Wired Manual")
            local ipaddr
            local submask
            local gateway

            systemctl stop "dhcpcd@${wired_dev}.service"

            read -rp "IP Address: " ipaddr
            read -rp "Submask: " submask
            read -rp "Gateway: " gateway

            ip link set "${wired_dev}" up
            ip addr add "${ipaddr}/${submask}" dev "${wired_dev}"
            ip route add default via "${gateway}"
            ;;
        "Wireless")
            ip link set "${wireless_dev}" up
            wifi-menu "${wireless_dev}"
            ;;
    esac

    if ! test_connection; then
        print_warning "Can't establish connection. Exiting"
        exit 1
    fi
}
