#!/usr/bin/env bash
## Copyright (c) 2017 Stephen Ribich
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in
## all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

## Boot Mode
## 0 - BIOS
## 1 - UEFI
UEFI=0

## Return whether the machine is booted in UEFI mode. This is used to enable
## specific options in the bootstrap script
##
is_uefi()
{
  if [[ "${UEFI}" -eq 1 ]]; then
    return 0
  else
    return 1
  fi
}

## Return whether the machine is booted in BIOS mode. If the system is booted
## in BIOS mode, certain features of the bootstrap script will be unavailaible
##
is_bios()
{
  if [[ "${UEFI}" -eq 0 ]]; then
    return 0
  else
    return 1
  fi
}

## Returns the system boot mode. This must be checked as certain features are
## not availaible in BIOS mode
##
get_boot_mode()
{
  local vendor

  vendor="$(cat /sys/class/dmi/id/sys_vendor)"

  if [[ "${vendor}" == "Apple Inc." || "${vendor}" == "Apple Computer, Inc." ]]; then
    modprobe -r -q efivars || true
  else
    modprobe -q efivarfs
  fi

  if [[ -d "/sys/firmware/efi" ]]; then
    if ! mount | grep /sys/firmware/efi/efivars 1>/dev/null 2>&1; then
      mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    fi

    UEFI=1
    printf "UEFI Mode detected\n"
  else
    UEFI=0
    printf "BIOS Mode detected\n"
  fi
}
